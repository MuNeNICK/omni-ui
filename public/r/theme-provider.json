{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-provider",
  "type": "registry:component",
  "title": "Theme Provider",
  "description": "Client-side theme manager providing context and hooks.",
  "files": [
    {
      "path": "registry/new-york/lib/theme-provider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\ntype Theme = \"light\" | \"dark\"\n\nexport type ThemeSetting = Theme | \"system\"\n\nexport type ThemeProviderProps = {\n  attribute?: string\n  children: React.ReactNode\n  defaultTheme?: ThemeSetting\n  disableTransitionOnChange?: boolean\n  enableSystem?: boolean\n  storageKey?: string\n  value?: Partial<Record<ThemeSetting | Theme, string>>\n}\n\ntype ThemeContextValue = {\n  theme: ThemeSetting\n  resolvedTheme: Theme\n  systemTheme: Theme\n  setTheme: (theme: ThemeSetting) => void\n}\n\nconst COLOR_SCHEME_QUERY = \"(prefers-color-scheme: dark)\"\nconst DEFAULT_STORAGE_KEY = \"omni-ui-theme\"\nconst DEFAULT_ATTRIBUTE_VALUE: Record<Theme, string> = {\n  light: \"light\",\n  dark: \"dark\",\n}\n\nconst ThemeContext =\n  React.createContext<ThemeContextValue | undefined>(undefined)\n\nfunction getDocumentElement() {\n  return typeof document === \"undefined\" ? null : document.documentElement\n}\n\nfunction disableTransitionsTemporarily() {\n  const doc = typeof document === \"undefined\" ? null : document\n  if (!doc) return () => {}\n\n  const style = doc.createElement(\"style\")\n  style.setAttribute(\"data-omni-theme-transition\", \"false\")\n  style.appendChild(\n    doc.createTextNode(\n      \"*{transition-duration:0s !important; animation-duration:0s !important;}\"\n    )\n  )\n  doc.head.appendChild(style)\n\n  return () => {\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        style.remove()\n      })\n    })\n  }\n}\n\nfunction applyThemeClass(options: {\n  attribute: string\n  disableTransitionOnChange: boolean\n  theme: Theme\n  value?: ThemeProviderProps[\"value\"]\n}) {\n  const docEl = getDocumentElement()\n  if (!docEl) return\n\n  const { attribute, disableTransitionOnChange, theme, value } = options\n  const cleanup = disableTransitionOnChange\n    ? disableTransitionsTemporarily()\n    : undefined\n\n  const themeValue =\n    value?.[theme] ?? value?.[theme === \"dark\" ? \"dark\" : \"light\"]\n\n  if (attribute === \"class\") {\n    const classToAdd =\n      themeValue ??\n      (theme === \"dark\"\n        ? DEFAULT_ATTRIBUTE_VALUE.dark\n        : DEFAULT_ATTRIBUTE_VALUE.light)\n    const classToRemove =\n      theme === \"dark\"\n        ? DEFAULT_ATTRIBUTE_VALUE.light\n        : DEFAULT_ATTRIBUTE_VALUE.dark\n\n    docEl.classList.add(classToAdd)\n    docEl.classList.remove(classToRemove)\n  } else {\n    const valueToSet =\n      themeValue ??\n      (theme === \"dark\"\n        ? DEFAULT_ATTRIBUTE_VALUE.dark\n        : DEFAULT_ATTRIBUTE_VALUE.light)\n    docEl.setAttribute(attribute, valueToSet)\n  }\n\n  cleanup?.()\n}\n\nfunction getSystemTheme(): Theme {\n  if (typeof window === \"undefined\") {\n    return \"light\"\n  }\n  return window.matchMedia(COLOR_SCHEME_QUERY).matches ? \"dark\" : \"light\"\n}\n\nexport function ThemeProvider({\n  attribute = \"class\",\n  children,\n  defaultTheme = \"system\",\n  disableTransitionOnChange = false,\n  enableSystem = true,\n  storageKey = DEFAULT_STORAGE_KEY,\n  value,\n}: ThemeProviderProps) {\n  const [theme, setThemeState] = React.useState<ThemeSetting>(defaultTheme)\n  const [systemTheme, setSystemTheme] = React.useState<Theme>(getSystemTheme)\n  const resolvedTheme =\n    theme === \"system\" && enableSystem ? systemTheme : (theme as Theme)\n\n  React.useEffect(() => {\n    const storedTheme = (() => {\n      try {\n        const item = localStorage.getItem(storageKey)\n        if (item === \"light\" || item === \"dark\" || item === \"system\") {\n          return item as ThemeSetting\n        }\n        return null\n      } catch {\n        return null\n      }\n    })()\n\n    if (storedTheme) {\n      setThemeState(storedTheme)\n      return\n    }\n\n    setThemeState(defaultTheme)\n  }, [defaultTheme, storageKey])\n\n  React.useEffect(() => {\n    if (!enableSystem) return\n    if (typeof window === \"undefined\") return\n    const media = window.matchMedia(COLOR_SCHEME_QUERY)\n    const handler = (event: MediaQueryListEvent) => {\n      setSystemTheme(event.matches ? \"dark\" : \"light\")\n    }\n    setSystemTheme(media.matches ? \"dark\" : \"light\")\n    media.addEventListener(\"change\", handler)\n    return () => media.removeEventListener(\"change\", handler)\n  }, [enableSystem])\n\n  React.useEffect(() => {\n    applyThemeClass({\n      attribute,\n      disableTransitionOnChange,\n      theme: resolvedTheme,\n      value,\n    })\n  }, [attribute, disableTransitionOnChange, resolvedTheme, value])\n\n  const setTheme = React.useCallback(\n    (nextTheme: ThemeSetting) => {\n      setThemeState(nextTheme)\n      try {\n        localStorage.setItem(storageKey, nextTheme)\n      } catch {\n        // localStorage might be disabled\n      }\n    },\n    [storageKey]\n  )\n\n  const contextValue = React.useMemo<ThemeContextValue>(\n    () => ({\n      theme,\n      resolvedTheme,\n      setTheme,\n      systemTheme,\n    }),\n    [theme, resolvedTheme, setTheme, systemTheme]\n  )\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme() {\n  const context = React.useContext(ThemeContext)\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n  }\n  return context\n}\n",
      "type": "registry:component",
      "target": "lib/theme-provider.tsx"
    }
  ]
}