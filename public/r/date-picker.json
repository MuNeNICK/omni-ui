{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker",
  "type": "registry:component",
  "title": "Date Picker",
  "description": "Date Picker component.",
  "dependencies": [
    "date-fns",
    "lucide-react",
    "react-day-picker"
  ],
  "registryDependencies": [
    "@omni/button",
    "calendar",
    "popover",
    "@omni/utils",
    "@omni/font-mono",
    "@omni/glass-style"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/date-picker.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { CalendarIcon, RotateCcwIcon } from \"lucide-react\"\nimport { type DateRange } from \"react-day-picker\"\n\nimport { cn } from \"@/registry/new-york/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Calendar } from \"@/registry/new-york/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\"\n\ntype CalendarComponentProps = React.ComponentProps<typeof Calendar>\ntype CalendarMode = NonNullable<CalendarComponentProps[\"mode\"]>\n\ntype DatePickerValue<M extends CalendarMode> = M extends \"multiple\"\n  ? Date[] | undefined\n  : M extends \"range\"\n    ? DateRange | undefined\n    : Date | undefined\n\ntype DatePickerProps<M extends CalendarMode = \"single\"> = Omit<\n  CalendarComponentProps,\n  \"selected\" | \"mode\" | \"onSelect\"\n> & {\n  mode?: M\n  value?: DatePickerValue<M>\n  defaultValue?: DatePickerValue<M>\n  onValueChange?: (value: DatePickerValue<M>) => void\n  placeholder?: React.ReactNode\n  formatValue?: (value: DatePickerValue<M>) => React.ReactNode\n  closeOnSelect?: boolean\n  showClearButton?: boolean\n  clearLabel?: React.ReactNode\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n  buttonSize?: React.ComponentProps<typeof Button>[\"size\"]\n  triggerClassName?: string\n  popoverClassName?: string\n}\n\ntype UseControllableStateProps<T> = {\n  value?: T\n  defaultValue?: T\n  onChange?: (value: T) => void\n}\n\nfunction useControllableState<T>({\n  value,\n  defaultValue,\n  onChange,\n}: UseControllableStateProps<T>) {\n  const [internalValue, setInternalValue] = React.useState<T | undefined>(\n    defaultValue\n  )\n  const isControlled = value !== undefined\n  const current = isControlled ? value : internalValue\n\n  const setValue = React.useCallback(\n    (next: T | undefined) => {\n      if (!isControlled) {\n        setInternalValue(next)\n      }\n      onChange?.(next as T)\n    },\n    [isControlled, onChange]\n  )\n\n  return [current, setValue] as const\n}\n\nfunction DatePicker<M extends CalendarMode = \"single\">({\n  mode,\n  value,\n  defaultValue,\n  onValueChange,\n  placeholder,\n  formatValue,\n  closeOnSelect,\n  showClearButton = false,\n  clearLabel = \"Reset\",\n  buttonVariant = \"muted\",\n  buttonSize = \"sm\",\n  triggerClassName,\n  popoverClassName,\n  captionLayout,\n  ...calendarProps\n}: DatePickerProps<M>) {\n  const [open, setOpen] = React.useState(false)\n  const pickerMode = mode ?? \"single\"\n  const shouldCloseOnSelect = closeOnSelect ?? pickerMode === \"single\"\n\n  const [selected, setSelected] = useControllableState<DatePickerValue<M>>({\n    value,\n    defaultValue,\n    onChange: onValueChange,\n  })\n\n  const placeholderText =\n    placeholder ??\n    (pickerMode === \"range\"\n      ? \"Select range\"\n      : pickerMode === \"multiple\"\n        ? \"Select dates\"\n        : \"Select date\")\n\n  const displayValue = React.useMemo(() => {\n    if (!selected) return null\n    if (formatValue) return formatValue(selected)\n\n    if (pickerMode === \"multiple\" && Array.isArray(selected)) {\n      if (!selected.length) return null\n      return `${selected.length} ${selected.length === 1 ? \"date\" : \"dates\"}`\n    }\n\n    if (pickerMode === \"range\") {\n      const range = selected as DateRange | undefined\n      if (!range?.from) return null\n      if (!range.to) {\n        return format(range.from, \"LLL dd, yyyy\")\n      }\n      return `${format(range.from, \"LLL dd\")} â€” ${format(\n        range.to,\n        \"LLL dd, yyyy\"\n      )}`\n    }\n\n    return format(selected as Date, \"LLL dd, yyyy\")\n  }, [formatValue, pickerMode, selected])\n\n  const handleSelect = React.useCallback(\n    (nextValue: DatePickerValue<M>) => {\n      setSelected(nextValue)\n\n      if (!shouldCloseOnSelect) return\n\n      if (pickerMode === \"single\") {\n        if (nextValue) setOpen(false)\n        return\n      }\n\n      if (pickerMode === \"multiple\") {\n        if (Array.isArray(nextValue) && nextValue.length) {\n          setOpen(false)\n        }\n        return\n      }\n\n      if (pickerMode === \"range\") {\n        const range = nextValue as DateRange | undefined\n        if (range?.from && range?.to) {\n          setOpen(false)\n        }\n      }\n    },\n    [pickerMode, setSelected, shouldCloseOnSelect]\n  )\n\n  const handleReset = React.useCallback(() => {\n    setSelected(undefined)\n  }, [setSelected])\n\n  const computedCaptionLayout = (captionLayout ?? (pickerMode === \"single\" ? \"dropdown\" : undefined)) as CalendarComponentProps[\"captionLayout\"]\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant={buttonVariant}\n          size={buttonSize}\n          className={cn(\n            \"flex min-w-[12rem] items-center gap-3 border border-border/60 bg-muted/40 px-3 text-[11px] font-mono uppercase tracking-[0.28em] text-foreground/85 shadow-[var(--glass-shadow-outline)] hover:border-foreground\",\n            !displayValue && \"text-muted-foreground/70\",\n            \"rounded-none\",\n            triggerClassName\n          )}\n        >\n          <CalendarIcon className=\"size-3.5 opacity-70\" aria-hidden=\"true\" />\n          <span className=\"truncate text-left leading-none\">\n            {displayValue ?? placeholderText}\n          </span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        align=\"start\"\n        sideOffset={8}\n        className={cn(\n          \"p-0\",\n          popoverClassName\n        )}\n      >\n        <div className=\"flex flex-col gap-3 p-3\">\n          <Calendar\n            {...({\n              mode: pickerMode,\n              selected,\n              onSelect: handleSelect,\n              captionLayout: computedCaptionLayout,\n              buttonVariant: \"ghost\",\n              ...calendarProps,\n            } as unknown as CalendarComponentProps)}\n          />\n          {showClearButton && selected ? (\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleReset}\n              className=\"h-8 w-full justify-center gap-2 border border-border/40 bg-background/30 text-[11px] font-mono uppercase tracking-[0.28em] text-muted-foreground/80 hover:border-border/60 hover:bg-foreground/10 hover:text-foreground\"\n            >\n              <RotateCcwIcon className=\"size-3.5\" />\n              {clearLabel}\n            </Button>\n          ) : null}\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport { DatePicker }\n",
      "type": "registry:component",
      "target": "components/ui/date-picker.tsx"
    }
  ]
}