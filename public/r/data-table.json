{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "Data Table component.",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react"
  ],
  "registryDependencies": [
    "@omni/button",
    "@omni/dropdown-menu",
    "@omni/input",
    "@omni/select",
    "@omni/table",
    "@omni/utils",
    "@omni/font-mono",
    "@omni/glass-style"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/data-table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type Table as TableInstance,\n  type VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  ChevronsUpDownIcon,\n  SlidersHorizontalIcon,\n} from \"lucide-react\"\n\nimport { cn } from \"@/registry/new-york/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Input } from \"@/registry/new-york/ui/input\"\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/registry/new-york/ui/table\"\n\ntype DataTableProps<TData, TValue> = {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  className?: string\n  searchKey?: string\n  searchPlaceholder?: string\n  toolbar?: (table: TableInstance<TData>) => React.ReactNode\n  emptyMessage?: React.ReactNode\n  initialPageSize?: number\n  pageSizeOptions?: number[]\n  footer?: React.ReactNode\n  viewOptions?: boolean\n}\n\ntype DataTableColumnMeta = {\n  headerLabel?: string\n}\n\nconst defaultPageSizeOptions = [10, 20, 30, 50]\n\nfunction DataTable<TData, TValue>({\n  columns,\n  data,\n  className,\n  searchKey,\n  searchPlaceholder = \"Filter results...\",\n  toolbar,\n  emptyMessage = \"No records found.\",\n  initialPageSize = 10,\n  pageSizeOptions = defaultPageSizeOptions,\n  footer,\n  viewOptions = true,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n  const [searchValue, setSearchValue] = React.useState(\"\")\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n    initialState: {\n      pagination: {\n        pageSize: initialPageSize,\n      },\n    },\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  })\n\n  React.useEffect(() => {\n    if (!searchKey) return\n    const column = table.getColumn(searchKey as string)\n    column?.setFilterValue(searchValue)\n  }, [table, searchKey, searchValue])\n\n  const isFiltered = Boolean(searchValue) || columnFilters.length > 0\n\n  return (\n    <div\n      data-slot=\"data-table\"\n      className={cn(\"flex flex-col gap-4\", className)}\n    >\n      <div className=\"flex flex-col gap-3 border border-border/60 bg-muted/40 px-4 py-3 text-[10px] font-mono uppercase tracking-[0.28em] text-muted-foreground/80 shadow-[var(--glass-shadow-outline)] backdrop-blur-[4px] sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex flex-1 flex-wrap items-center gap-2\">\n          {toolbar?.(table)}\n          {isFiltered ? (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 border border-transparent px-3 py-1 tracking-[0.28em] text-muted-foreground/70 hover:border-border/60 hover:bg-foreground/10 hover:text-foreground\"\n              onClick={() => {\n                setSearchValue(\"\")\n                table.resetColumnFilters()\n              }}\n            >\n              Reset\n            </Button>\n          ) : null}\n          <span className=\"hidden items-center gap-1 text-[9px] tracking-[0.32em] text-muted-foreground/60 sm:inline-flex\">\n            {table.getFilteredSelectedRowModel().rows.length} selected â€¢ {table.getFilteredRowModel().rows.length} total\n          </span>\n        </div>\n        <div className=\"flex w-full flex-col gap-2 sm:w-auto sm:flex-row sm:items-center sm:gap-3\">\n          {searchKey ? (\n            <Input\n              value={searchValue}\n              onChange={(event) => setSearchValue(event.target.value)}\n              placeholder={searchPlaceholder}\n              className=\"h-9 w-full min-w-[220px] border-border/60 bg-background/20 text-[11px] font-mono uppercase tracking-[0.28em] text-foreground/90 sm:w-56\"\n            />\n          ) : null}\n          {viewOptions ? <DataTableViewOptions table={table} /> : null}\n        </div>\n      </div>\n      <div className=\"overflow-hidden border border-border/60 bg-background/10 shadow-[var(--glass-shadow-outline-subtle)] backdrop-blur-[2px]\">\n        <Table className=\"min-w-full text-left\">\n          <TableHeader className=\"bg-muted/40\">\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow\n                key={headerGroup.id}\n                className=\"border-border/40 uppercase\"\n              >\n                {headerGroup.headers.map((header) => {\n                  if (header.isPlaceholder) {\n                    return <TableHead key={header.id} />\n                  }\n\n                  const canSort = header.column.getCanSort()\n                  const sortDirection = header.column.getIsSorted()\n\n                  return (\n                    <TableHead\n                      key={header.id}\n                      className={cn(\n                        \"h-12 px-3 text-[10px] font-mono uppercase tracking-[0.32em] text-muted-foreground/80\",\n                        \"[&[data-sort=desc]]:text-foreground [&[data-sort=asc]]:text-foreground\"\n                      )}\n                      data-sort={sortDirection ? String(sortDirection) : undefined}\n                    >\n                      {canSort ? (\n                        <button\n                          type=\"button\"\n                          onClick={header.column.getToggleSortingHandler()}\n                          className=\"group flex w-full items-center gap-2 text-left transition-colors hover:text-foreground\"\n                        >\n                          <span className=\"truncate\">\n                            {flexRender(header.column.columnDef.header, header.getContext())}\n                          </span>\n                          <span className=\"flex items-center\">\n                            {sortDirection === \"asc\" ? (\n                              <ArrowUpIcon className=\"size-3.5\" />\n                            ) : sortDirection === \"desc\" ? (\n                              <ArrowDownIcon className=\"size-3.5\" />\n                            ) : (\n                              <ChevronsUpDownIcon className=\"size-3.5 opacity-40 group-hover:opacity-70\" />\n                            )}\n                          </span>\n                        </button>\n                      ) : (\n                        flexRender(header.column.columnDef.header, header.getContext())\n                      )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() ? \"selected\" : undefined}\n                  className=\"border-border/40 text-sm text-foreground/85 transition-colors hover:bg-muted/30\"\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      className=\"px-3 py-3 text-sm font-mono tracking-[0.08em] text-foreground/80\"\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow className=\"border-border/40\">\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 px-4 text-center text-sm text-muted-foreground\"\n                >\n                  {emptyMessage}\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      {footer}\n      <DataTablePagination table={table} pageSizeOptions={pageSizeOptions} />\n    </div>\n  )\n}\n\ntype DataTableViewOptionsProps<TData> = {\n  table: TableInstance<TData>\n}\n\nfunction DataTableViewOptions<TData>({ table }: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-9 gap-2 border border-border/60 bg-muted/40 px-3 font-mono uppercase tracking-[0.28em] text-muted-foreground/80 hover:bg-foreground/10 hover:text-foreground\"\n        >\n          <SlidersHorizontalIcon className=\"size-3.5\" />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        align=\"end\"\n        className=\"min-w-[12rem] border-border/60 bg-muted/60 text-foreground shadow-[var(--glass-shadow-outline)]\"\n      >\n        <DropdownMenuCheckboxItem\n          className=\"pointer-events-none opacity-70\"\n          checked\n        >\n          Columns\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem className=\"pointer-events-none opacity-40\" checked>\n          â€”\n        </DropdownMenuCheckboxItem>\n        {table\n          .getAllLeafColumns()\n          .filter((column) => column.getCanHide())\n          .map((column) => (\n            <DropdownMenuCheckboxItem\n              key={column.id}\n              checked={column.getIsVisible()}\n              onCheckedChange={(value) => column.toggleVisibility(Boolean(value))}\n              className=\"font-mono text-[11px] uppercase tracking-[0.28em] text-muted-foreground/80 data-[state=checked]:text-foreground\"\n            >\n              {(column.columnDef.meta as DataTableColumnMeta | undefined)?.headerLabel || column.id}\n            </DropdownMenuCheckboxItem>\n          ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n\ntype DataTablePaginationProps<TData> = {\n  table: TableInstance<TData>\n  pageSizeOptions?: number[]\n}\n\nfunction DataTablePagination<TData>({\n  table,\n  pageSizeOptions = defaultPageSizeOptions,\n}: DataTablePaginationProps<TData>) {\n  const pageSize = table.getState().pagination.pageSize\n  const pageCount = table.getPageCount()\n  const pageIndex = table.getState().pagination.pageIndex\n  const pageStart = pageIndex * pageSize + 1\n  const pageEnd = Math.min(pageStart + pageSize - 1, table.getFilteredRowModel().rows.length)\n\n  return (\n    <div className=\"flex flex-col gap-3 border border-border/60 bg-muted/40 px-4 py-3 text-[10px] font-mono uppercase tracking-[0.28em] text-muted-foreground/80 shadow-[var(--glass-shadow-outline)] backdrop-blur-[4px] sm:flex-row sm:items-center sm:justify-between\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        <span>\n          Showing {table.getFilteredRowModel().rows.length ? `${pageStart}â€“${pageEnd}` : 0} of {\" \"}\n          {table.getFilteredRowModel().rows.length} rows\n        </span>\n      </div>\n      <div className=\"flex flex-wrap items-center gap-3\">\n        <div className=\"flex items-center gap-2\">\n          <span>Rows</span>\n          <Select\n            value={String(pageSize)}\n            onValueChange={(value) => table.setPageSize(Number(value))}\n          >\n            <SelectTrigger className=\"h-8 min-w-[4.5rem] border-border/60 bg-background/20 text-[11px] font-mono uppercase tracking-[0.28em] text-foreground/85\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent align=\"end\" className=\"bg-muted/60\">\n              <SelectGroup>\n                {pageSizeOptions.map((option) => (\n                  <SelectItem key={option} value={String(option)}>\n                    {option}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 border border-border/60 bg-background/20 p-0 text-foreground/80 transition hover:bg-foreground/10 hover:text-foreground\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <ChevronLeftIcon className=\"size-3.5\" />\n            <span className=\"sr-only\">Previous</span>\n          </Button>\n          <span className=\"text-[9px] text-muted-foreground/70\">\n            {pageIndex + 1} / {pageCount || 1}\n          </span>\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 border border-border/60 bg-background/20 p-0 text-foreground/80 transition hover:bg-foreground/10 hover:text-foreground\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <ChevronRightIcon className=\"size-3.5\" />\n            <span className=\"sr-only\">Next</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { DataTable, DataTablePagination, DataTableViewOptions }\n",
      "type": "registry:component",
      "target": "components/ui/data-table.tsx"
    }
  ]
}