{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:component",
  "title": "Combobox",
  "description": "Combobox component.",
  "dependencies": [
    "@radix-ui/react-popover",
    "lucide-react"
  ],
  "registryDependencies": [
    "command",
    "@omni/utils",
    "@omni/font-mono",
    "@omni/glass-style"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/combobox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport { CheckIcon, ChevronsUpDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/registry/new-york/lib/utils\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\"\n\nconst Combobox = ({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) => (\n  <PopoverPrimitive.Root data-slot=\"combobox\" {...props} />\n)\n\nconst ComboboxTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Trigger> & {\n    placeholder?: React.ReactNode\n    hideIndicator?: boolean\n    size?: \"sm\" | \"default\"\n  }\n>(({ className, children, placeholder, hideIndicator = false, size = \"default\", ...props }, ref) => {\n  const showPlaceholder = children === undefined || children === null || children === \"\"\n\n  return (\n    <PopoverPrimitive.Trigger\n      ref={ref}\n      data-slot=\"combobox-trigger\"\n      data-size={size}\n      data-placeholder={showPlaceholder ? \"true\" : undefined}\n      className={cn(\n        \"inline-flex w-fit items-center justify-between gap-2 border border-border/60 bg-muted/60 px-3 text-[11px] font-mono uppercase tracking-[0.28em] text-foreground/85 shadow-[var(--glass-shadow-outline)] transition-[border,background,color,box-shadow] outline-none\",\n        \"focus-visible:border-foreground focus-visible:ring-2 focus-visible:ring-ring/40 focus-visible:ring-offset-2 focus-visible:ring-offset-background\",\n        \"aria-invalid:border-destructive aria-invalid:focus-visible:ring-destructive/35\",\n        \"disabled:cursor-not-allowed disabled:opacity-50\",\n        \"data-[size=default]:h-10 data-[size=default]:min-w-[10rem]\",\n        \"data-[size=sm]:h-9 data-[size=sm]:min-w-[8rem]\",\n        \"data-[placeholder=true]:text-muted-foreground/70\",\n        \"rounded-none\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"truncate text-left leading-none\">\n        {showPlaceholder ? placeholder : children}\n      </span>\n      {hideIndicator ? null : (\n        <ChevronsUpDownIcon className=\"size-3.5 shrink-0 opacity-60\" aria-hidden=\"true\" />\n      )}\n    </PopoverPrimitive.Trigger>\n  )\n})\nComboboxTrigger.displayName = \"ComboboxTrigger\"\n\ntype ComboboxContentProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitive.Content\n> & {\n  commandProps?: React.ComponentProps<typeof Command>\n}\n\nconst ComboboxContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  ComboboxContentProps\n>(({ className, sideOffset = 6, align = \"start\", commandProps, children, ...props }, ref) => {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        ref={ref}\n        data-slot=\"combobox-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"relative z-50 min-w-[12rem] border border-border/60 bg-muted/60 text-foreground shadow-[var(--glass-shadow-outline)] backdrop-blur-[6px]\",\n          \"data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:zoom-out-95\",\n          \"data-[side=bottom]:slide-in-from-top-2 data-[side=top]:slide-in-from-bottom-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2\",\n          \"rounded-none outline-hidden\",\n          className\n        )}\n        {...props}\n      >\n        <Command\n          {...commandProps}\n          className={cn(\n            \"bg-transparent\",\n            \"[&_[cmdk-group-heading]]:px-3 [&_[cmdk-group-heading]]:pb-1 [&_[cmdk-group-heading]]:font-mono [&_[cmdk-group-heading]]:text-[10px] [&_[cmdk-group-heading]]:uppercase [&_[cmdk-group-heading]]:tracking-[0.28em] [&_[cmdk-group-heading]]:text-muted-foreground/70\",\n            \"[&_[cmdk-group]]:px-1\",\n            \"[&_[cmdk-item]]:px-3 [&_[cmdk-item]]:py-2\",\n            commandProps?.className\n          )}\n        >\n          {children}\n        </Command>\n      </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  )\n})\nComboboxContent.displayName = \"ComboboxContent\"\n\nconst ComboboxSearch = ({\n  className,\n  placeholder = \"Filter options...\",\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandInput>) => (\n  <CommandInput\n    data-slot=\"combobox-search\"\n    placeholder={placeholder}\n    className={cn(\n      \"h-12 font-mono text-[10px] uppercase tracking-[0.32em] text-muted-foreground/75 placeholder:text-muted-foreground/60\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ComboboxList = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandList>) => (\n  <CommandList\n    data-slot=\"combobox-list\"\n    className={cn(\"max-h-60 scroll-py-1 overflow-y-auto\", className)}\n    {...props}\n  />\n)\n\nconst ComboboxEmpty = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandEmpty>) => (\n  <CommandEmpty\n    data-slot=\"combobox-empty\"\n    className={cn(\n      \"py-6 text-center text-[11px] font-mono uppercase tracking-[0.28em] text-muted-foreground/70\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ComboboxGroup = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandGroup>) => (\n  <CommandGroup\n    data-slot=\"combobox-group\"\n    className={cn(\"overflow-hidden py-1\", className)}\n    {...props}\n  />\n)\n\nconst ComboboxSeparator = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandSeparator>) => (\n  <CommandSeparator\n    data-slot=\"combobox-separator\"\n    className={cn(\n      \"pointer-events-none -mx-1 my-1 h-px bg-gradient-to-r from-transparent via-border/60 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ComboboxItem = ({\n  className,\n  children,\n  indicator,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof CommandItem> & {\n  indicator?: React.ReactNode\n}) => {\n  const renderedIndicator = React.useMemo(() => {\n    if (React.isValidElement(indicator)) {\n      const element = indicator as React.ReactElement<{ className?: string }>\n      return React.cloneElement(element, {\n        className: cn(\n          \"size-3.5 opacity-0 transition-opacity\",\n          element.props.className,\n          \"group-data-[selected=true]/combobox-item:opacity-100\"\n        ),\n      })\n    }\n\n    if (indicator === null) {\n      return null\n    }\n\n    if (indicator === undefined) {\n      return (\n        <CheckIcon className=\"size-3.5 opacity-0 transition-opacity group-data-[selected=true]/combobox-item:opacity-100\" />\n      )\n    }\n\n    return indicator\n  }, [indicator])\n\n  return (\n    <CommandItem\n      data-slot=\"combobox-item\"\n      className={cn(\n        \"group/combobox-item relative flex w-full cursor-default items-center gap-3 px-3 py-2 text-[11px] font-mono uppercase tracking-[0.28em] text-muted-foreground/80 outline-hidden transition-[background,color]\",\n        \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-35\",\n        \"data-[selected=true]:bg-foreground data-[selected=true]:text-background\",\n        \"rounded-none\",\n        className\n      )}\n      {...props}\n    >\n      {renderedIndicator ? (\n        <span className=\"flex size-4 shrink-0 items-center justify-center\" aria-hidden=\"true\">\n          {renderedIndicator}\n        </span>\n      ) : null}\n      <span className=\"truncate text-left leading-tight\">{children}</span>\n    </CommandItem>\n  )\n}\n\nexport {\n  Combobox,\n  ComboboxContent,\n  ComboboxTrigger,\n  ComboboxSearch,\n  ComboboxList,\n  ComboboxEmpty,\n  ComboboxGroup,\n  ComboboxSeparator,\n  ComboboxItem,\n}\n",
      "type": "registry:component",
      "target": "components/ui/combobox.tsx"
    }
  ]
}