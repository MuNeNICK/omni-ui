{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typography",
  "type": "registry:component",
  "title": "Typography",
  "description": "Typography component.",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "@omni/utils",
    "@omni/font-mono"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/typography.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/registry/new-york/lib/utils\"\n\nconst typographyVariants = cva(\"text-foreground\", {\n  variants: {\n    variant: {\n      display:\n        \"font-mono text-4xl uppercase tracking-[0.32em] text-foreground/95 leading-[1.05]\",\n      headline:\n        \"font-mono text-2xl uppercase tracking-[0.3em] text-foreground/90 leading-snug\",\n      title:\n        \"font-mono text-xl uppercase tracking-[0.28em] text-foreground/85\",\n      subtitle:\n        \"font-mono text-lg uppercase tracking-[0.26em] text-muted-foreground/90\",\n      eyebrow:\n        \"font-mono text-[11px] uppercase tracking-[0.42em] text-muted-foreground/70\",\n      body: \"text-base leading-relaxed text-foreground/85\",\n      bodyMuted: \"text-base leading-relaxed text-muted-foreground/80\",\n      mono: \"font-mono text-sm uppercase tracking-[0.32em] text-muted-foreground/80\",\n      caption:\n        \"font-mono text-xs uppercase tracking-[0.36em] text-muted-foreground/70\",\n      metric:\n        \"font-mono text-5xl leading-none tracking-tight text-foreground\",\n      code: \"rounded-none bg-muted/40 px-2 py-1 font-mono text-[13px] text-foreground/90\",\n      label:\n        \"font-mono text-[12px] uppercase tracking-[0.36em] text-muted-foreground/75\",\n    },\n  },\n  defaultVariants: {\n    variant: \"body\",\n  },\n})\n\ntype TypographyProps = React.HTMLAttributes<HTMLElement> &\n  VariantProps<typeof typographyVariants> & {\n    asChild?: boolean\n    as?: React.ElementType\n  }\n\nconst Typography = React.forwardRef<HTMLElement, TypographyProps>(\n  ({ asChild = false, as, variant, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : (as ?? \"p\")\n\n    return (\n      <Comp\n        ref={ref as React.ForwardedRef<HTMLElement>}\n        data-slot=\"typography\"\n        data-variant={variant ?? \"body\"}\n        className={cn(typographyVariants({ variant }), className)}\n        {...props}\n      />\n    )\n  }\n)\nTypography.displayName = \"Typography\"\n\nfunction createTypographyComponent<V extends VariantProps<typeof typographyVariants>[\"variant\"]>(\n  variant: V,\n  element: keyof React.JSX.IntrinsicElements\n) {\n  const Component = React.forwardRef<\n    HTMLElement,\n    Omit<TypographyProps, \"variant\">\n  >(({ className, asChild = false, as, ...props }, ref) => {\n      const Comp = asChild ? Slot : (as ?? element)\n      return (\n        <Comp\n          ref={ref as React.ForwardedRef<HTMLElement>}\n          data-slot=\"typography\"\n          data-variant={variant}\n          className={cn(typographyVariants({ variant }), className)}\n          {...props}\n        />\n      )\n    }\n  )\n\n  const capitalizedVariant = variant\n    ? `${variant[0]?.toUpperCase() ?? \"\"}${variant.slice(1)}`\n    : \"Text\"\n\n  Component.displayName = `Typography${capitalizedVariant}`\n\n  return Component\n}\n\nconst TypographyDisplay = createTypographyComponent(\"display\", \"h1\")\nconst TypographyHeadline = createTypographyComponent(\"headline\", \"h2\")\nconst TypographyTitle = createTypographyComponent(\"title\", \"h3\")\nconst TypographySubtitle = createTypographyComponent(\"subtitle\", \"h4\")\nconst TypographyEyebrow = createTypographyComponent(\"eyebrow\", \"span\")\nconst TypographyBody = createTypographyComponent(\"body\", \"p\")\nconst TypographyBodyMuted = createTypographyComponent(\"bodyMuted\", \"p\")\nconst TypographyMono = createTypographyComponent(\"mono\", \"span\")\nconst TypographyCaption = createTypographyComponent(\"caption\", \"span\")\nconst TypographyMetric = createTypographyComponent(\"metric\", \"div\")\nconst TypographyCode = createTypographyComponent(\"code\", \"code\")\nconst TypographyLabel = createTypographyComponent(\"label\", \"span\")\n\nexport {\n  Typography,\n  TypographyDisplay,\n  TypographyHeadline,\n  TypographyTitle,\n  TypographySubtitle,\n  TypographyEyebrow,\n  TypographyBody,\n  TypographyBodyMuted,\n  TypographyMono,\n  TypographyCaption,\n  TypographyMetric,\n  TypographyCode,\n  TypographyLabel,\n  typographyVariants,\n}\n",
      "type": "registry:component",
      "target": "components/ui/typography.tsx"
    }
  ]
}